// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AuthControllerData, AuthControllerResponses, AuthControllerUpdateEmailData, AuthControllerUpdateEmailResponses, AuthControllerRegisterData, AuthControllerRegisterResponses, TodoControllerGetAllData, TodoControllerGetAllResponses, TodoControllerAddTodoData, TodoControllerAddTodoResponses, TodoControllerAddTodoErrors, TodoControllerCompleteTodoData, TodoControllerCompleteTodoResponses, TodoControllerCompleteTodoErrors, TodoControllerUncompleteTodoData, TodoControllerUncompleteTodoResponses, TodoControllerUncompleteTodoErrors, TodoControllerModifyTitleData, TodoControllerModifyTitleResponses, TodoControllerModifyTitleErrors, TodoControllerDeleteTodoData, TodoControllerDeleteTodoResponses, TodoControllerDeleteTodoErrors, TodoSseControllerStreamData, TodoSseControllerStreamResponses, TodoSseControllerOnData, TodoSseControllerOnResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const authController = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerResponses, unknown, ThrowOnError>({
        url: '/auth/login',
        ...options
    });
};

export const authControllerUpdateEmail = <ThrowOnError extends boolean = false>(options: Options<AuthControllerUpdateEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AuthControllerUpdateEmailResponses, unknown, ThrowOnError>({
        url: '/auth/updateEmail',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const authControllerRegister = <ThrowOnError extends boolean = false>(options: Options<AuthControllerRegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerRegisterResponses, unknown, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all todos
 */
export const todoControllerGetAll = <ThrowOnError extends boolean = false>(options?: Options<TodoControllerGetAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TodoControllerGetAllResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos',
        ...options
    });
};

/**
 * Create a new todo
 */
export const todoControllerAddTodo = <ThrowOnError extends boolean = false>(options: Options<TodoControllerAddTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TodoControllerAddTodoResponses, TodoControllerAddTodoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mark a todo as completed
 */
export const todoControllerCompleteTodo = <ThrowOnError extends boolean = false>(options: Options<TodoControllerCompleteTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TodoControllerCompleteTodoResponses, TodoControllerCompleteTodoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{id}/complete',
        ...options
    });
};

/**
 * Mark a todo as uncompleted
 */
export const todoControllerUncompleteTodo = <ThrowOnError extends boolean = false>(options: Options<TodoControllerUncompleteTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TodoControllerUncompleteTodoResponses, TodoControllerUncompleteTodoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{id}/uncomplete',
        ...options
    });
};

/**
 * Update a todo title
 */
export const todoControllerModifyTitle = <ThrowOnError extends boolean = false>(options: Options<TodoControllerModifyTitleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TodoControllerModifyTitleResponses, TodoControllerModifyTitleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{id}/title',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a todo
 */
export const todoControllerDeleteTodo = <ThrowOnError extends boolean = false>(options: Options<TodoControllerDeleteTodoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TodoControllerDeleteTodoResponses, TodoControllerDeleteTodoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/todos/{id}',
        ...options
    });
};

export const todoSseControllerStream = <ThrowOnError extends boolean = false>(options?: Options<TodoSseControllerStreamData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TodoSseControllerStreamResponses, unknown, ThrowOnError>({
        url: '/sse/todos/stream',
        ...options
    });
};

export const todoSseControllerOn = <ThrowOnError extends boolean = false>(options: Options<TodoSseControllerOnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TodoSseControllerOnResponses, unknown, ThrowOnError>({
        url: '/sse/todos/On',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};