/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: src/bitloops/proto/todo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export enum TODO_EVENTS {
    ADDED = 0,
    COMPLETED = 1,
    UNCOMPLETED = 2,
    MODIFIED_TITLE = 3,
    DELETED = 4
}
export class InitializeConnectionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): InitializeConnectionRequest {
        const message = new InitializeConnectionRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeConnectionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeConnectionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InitializeConnectionRequest {
        return InitializeConnectionRequest.deserialize(bytes);
    }
}
export class InitializeConnectionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        subscriberId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("subscriberId" in data && data.subscriberId != undefined) {
                this.subscriberId = data.subscriberId;
            }
        }
    }
    get subscriberId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set subscriberId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        subscriberId?: string;
    }): InitializeConnectionResponse {
        const message = new InitializeConnectionResponse({});
        if (data.subscriberId != null) {
            message.subscriberId = data.subscriberId;
        }
        return message;
    }
    toObject() {
        const data: {
            subscriberId?: string;
        } = {};
        if (this.subscriberId != null) {
            data.subscriberId = this.subscriberId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.subscriberId.length)
            writer.writeString(1, this.subscriberId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeConnectionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeConnectionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.subscriberId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InitializeConnectionResponse {
        return InitializeConnectionResponse.deserialize(bytes);
    }
}
export class KeepSubscriptionAliveRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        subscriberId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("subscriberId" in data && data.subscriberId != undefined) {
                this.subscriberId = data.subscriberId;
            }
        }
    }
    get subscriberId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set subscriberId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        subscriberId?: string;
    }): KeepSubscriptionAliveRequest {
        const message = new KeepSubscriptionAliveRequest({});
        if (data.subscriberId != null) {
            message.subscriberId = data.subscriberId;
        }
        return message;
    }
    toObject() {
        const data: {
            subscriberId?: string;
        } = {};
        if (this.subscriberId != null) {
            data.subscriberId = this.subscriberId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.subscriberId.length)
            writer.writeString(1, this.subscriberId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeepSubscriptionAliveRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeepSubscriptionAliveRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.subscriberId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): KeepSubscriptionAliveRequest {
        return KeepSubscriptionAliveRequest.deserialize(bytes);
    }
}
export class KeepSubscriptionAliveResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1]];
    constructor(data?: any[] | ({} & (({
        renewedAuthToken?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("renewedAuthToken" in data && data.renewedAuthToken != undefined) {
                this.renewedAuthToken = data.renewedAuthToken;
            }
        }
    }
    get renewedAuthToken() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set renewedAuthToken(value: string) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get hasRenewedAuthToken() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get _renewedAuthToken() {
        const cases: {
            [index: number]: "none" | "renewedAuthToken";
        } = {
            0: "none",
            1: "renewedAuthToken"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    static fromObject(data: {
        renewedAuthToken?: string;
    }): KeepSubscriptionAliveResponse {
        const message = new KeepSubscriptionAliveResponse({});
        if (data.renewedAuthToken != null) {
            message.renewedAuthToken = data.renewedAuthToken;
        }
        return message;
    }
    toObject() {
        const data: {
            renewedAuthToken?: string;
        } = {};
        if (this.renewedAuthToken != null) {
            data.renewedAuthToken = this.renewedAuthToken;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasRenewedAuthToken)
            writer.writeString(1, this.renewedAuthToken);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KeepSubscriptionAliveResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KeepSubscriptionAliveResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.renewedAuthToken = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): KeepSubscriptionAliveResponse {
        return KeepSubscriptionAliveResponse.deserialize(bytes);
    }
}
export class OnTodoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        subscriberId?: string;
        events?: TODO_EVENTS[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("subscriberId" in data && data.subscriberId != undefined) {
                this.subscriberId = data.subscriberId;
            }
            if ("events" in data && data.events != undefined) {
                this.events = data.events;
            }
        }
    }
    get subscriberId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set subscriberId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get events() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as TODO_EVENTS[];
    }
    set events(value: TODO_EVENTS[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        subscriberId?: string;
        events?: TODO_EVENTS[];
    }): OnTodoRequest {
        const message = new OnTodoRequest({});
        if (data.subscriberId != null) {
            message.subscriberId = data.subscriberId;
        }
        if (data.events != null) {
            message.events = data.events;
        }
        return message;
    }
    toObject() {
        const data: {
            subscriberId?: string;
            events?: TODO_EVENTS[];
        } = {};
        if (this.subscriberId != null) {
            data.subscriberId = this.subscriberId;
        }
        if (this.events != null) {
            data.events = this.events;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.subscriberId.length)
            writer.writeString(1, this.subscriberId);
        if (this.events.length)
            writer.writePackedEnum(2, this.events);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnTodoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnTodoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.subscriberId = reader.readString();
                    break;
                case 2:
                    message.events = reader.readPackedEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OnTodoRequest {
        return OnTodoRequest.deserialize(bytes);
    }
}
export class OnEvent extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
    constructor(data?: any[] | ({} & (({
        onAdded?: Todo;
        onCompleted?: never;
        onUncompleted?: never;
        onModifiedTitle?: never;
        onDeleted?: never;
    } | {
        onAdded?: never;
        onCompleted?: Todo;
        onUncompleted?: never;
        onModifiedTitle?: never;
        onDeleted?: never;
    } | {
        onAdded?: never;
        onCompleted?: never;
        onUncompleted?: Todo;
        onModifiedTitle?: never;
        onDeleted?: never;
    } | {
        onAdded?: never;
        onCompleted?: never;
        onUncompleted?: never;
        onModifiedTitle?: Todo;
        onDeleted?: never;
    } | {
        onAdded?: never;
        onCompleted?: never;
        onUncompleted?: never;
        onModifiedTitle?: never;
        onDeleted?: Todo;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("onAdded" in data && data.onAdded != undefined) {
                this.onAdded = data.onAdded;
            }
            if ("onCompleted" in data && data.onCompleted != undefined) {
                this.onCompleted = data.onCompleted;
            }
            if ("onUncompleted" in data && data.onUncompleted != undefined) {
                this.onUncompleted = data.onUncompleted;
            }
            if ("onModifiedTitle" in data && data.onModifiedTitle != undefined) {
                this.onModifiedTitle = data.onModifiedTitle;
            }
            if ("onDeleted" in data && data.onDeleted != undefined) {
                this.onDeleted = data.onDeleted;
            }
        }
    }
    get onAdded() {
        return pb_1.Message.getWrapperField(this, Todo, 1) as Todo;
    }
    set onAdded(value: Todo) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasOnAdded() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get onCompleted() {
        return pb_1.Message.getWrapperField(this, Todo, 2) as Todo;
    }
    set onCompleted(value: Todo) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasOnCompleted() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get onUncompleted() {
        return pb_1.Message.getWrapperField(this, Todo, 3) as Todo;
    }
    set onUncompleted(value: Todo) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasOnUncompleted() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get onModifiedTitle() {
        return pb_1.Message.getWrapperField(this, Todo, 4) as Todo;
    }
    set onModifiedTitle(value: Todo) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasOnModifiedTitle() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get onDeleted() {
        return pb_1.Message.getWrapperField(this, Todo, 5) as Todo;
    }
    set onDeleted(value: Todo) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get hasOnDeleted() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get event() {
        const cases: {
            [index: number]: "none" | "onAdded" | "onCompleted" | "onUncompleted" | "onModifiedTitle" | "onDeleted";
        } = {
            0: "none",
            1: "onAdded",
            2: "onCompleted",
            3: "onUncompleted",
            4: "onModifiedTitle",
            5: "onDeleted"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
    }
    static fromObject(data: {
        onAdded?: ReturnType<typeof Todo.prototype.toObject>;
        onCompleted?: ReturnType<typeof Todo.prototype.toObject>;
        onUncompleted?: ReturnType<typeof Todo.prototype.toObject>;
        onModifiedTitle?: ReturnType<typeof Todo.prototype.toObject>;
        onDeleted?: ReturnType<typeof Todo.prototype.toObject>;
    }): OnEvent {
        const message = new OnEvent({});
        if (data.onAdded != null) {
            message.onAdded = Todo.fromObject(data.onAdded);
        }
        if (data.onCompleted != null) {
            message.onCompleted = Todo.fromObject(data.onCompleted);
        }
        if (data.onUncompleted != null) {
            message.onUncompleted = Todo.fromObject(data.onUncompleted);
        }
        if (data.onModifiedTitle != null) {
            message.onModifiedTitle = Todo.fromObject(data.onModifiedTitle);
        }
        if (data.onDeleted != null) {
            message.onDeleted = Todo.fromObject(data.onDeleted);
        }
        return message;
    }
    toObject() {
        const data: {
            onAdded?: ReturnType<typeof Todo.prototype.toObject>;
            onCompleted?: ReturnType<typeof Todo.prototype.toObject>;
            onUncompleted?: ReturnType<typeof Todo.prototype.toObject>;
            onModifiedTitle?: ReturnType<typeof Todo.prototype.toObject>;
            onDeleted?: ReturnType<typeof Todo.prototype.toObject>;
        } = {};
        if (this.onAdded != null) {
            data.onAdded = this.onAdded.toObject();
        }
        if (this.onCompleted != null) {
            data.onCompleted = this.onCompleted.toObject();
        }
        if (this.onUncompleted != null) {
            data.onUncompleted = this.onUncompleted.toObject();
        }
        if (this.onModifiedTitle != null) {
            data.onModifiedTitle = this.onModifiedTitle.toObject();
        }
        if (this.onDeleted != null) {
            data.onDeleted = this.onDeleted.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOnAdded)
            writer.writeMessage(1, this.onAdded, () => this.onAdded.serialize(writer));
        if (this.hasOnCompleted)
            writer.writeMessage(2, this.onCompleted, () => this.onCompleted.serialize(writer));
        if (this.hasOnUncompleted)
            writer.writeMessage(3, this.onUncompleted, () => this.onUncompleted.serialize(writer));
        if (this.hasOnModifiedTitle)
            writer.writeMessage(4, this.onModifiedTitle, () => this.onModifiedTitle.serialize(writer));
        if (this.hasOnDeleted)
            writer.writeMessage(5, this.onDeleted, () => this.onDeleted.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.onAdded, () => message.onAdded = Todo.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.onCompleted, () => message.onCompleted = Todo.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.onUncompleted, () => message.onUncompleted = Todo.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.onModifiedTitle, () => message.onModifiedTitle = Todo.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.onDeleted, () => message.onDeleted = Todo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OnEvent {
        return OnEvent.deserialize(bytes);
    }
}
export class ErrorResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: string;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set code(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        code?: string;
        message?: string;
    }): ErrorResponse {
        const message = new ErrorResponse({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            code?: string;
            message?: string;
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code.length)
            writer.writeString(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readString();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ErrorResponse {
        return ErrorResponse.deserialize(bytes);
    }
}
export class AddTodoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        title?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
        }
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        title?: string;
    }): AddTodoRequest {
        const message = new AddTodoRequest({});
        if (data.title != null) {
            message.title = data.title;
        }
        return message;
    }
    toObject() {
        const data: {
            title?: string;
        } = {};
        if (this.title != null) {
            data.title = this.title;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.title.length)
            writer.writeString(1, this.title);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTodoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTodoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.title = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddTodoRequest {
        return AddTodoRequest.deserialize(bytes);
    }
}
export class AddTodoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ok?: AddTodoOKResponse;
        error?: never;
    } | {
        ok?: never;
        error?: AddTodoErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get ok() {
        return pb_1.Message.getWrapperField(this, AddTodoOKResponse, 1) as AddTodoOKResponse;
    }
    set ok(value: AddTodoOKResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasOk() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get error() {
        return pb_1.Message.getWrapperField(this, AddTodoErrorResponse, 2) as AddTodoErrorResponse;
    }
    set error(value: AddTodoErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "ok" | "error";
        } = {
            0: "none",
            1: "ok",
            2: "error"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ok?: ReturnType<typeof AddTodoOKResponse.prototype.toObject>;
        error?: ReturnType<typeof AddTodoErrorResponse.prototype.toObject>;
    }): AddTodoResponse {
        const message = new AddTodoResponse({});
        if (data.ok != null) {
            message.ok = AddTodoOKResponse.fromObject(data.ok);
        }
        if (data.error != null) {
            message.error = AddTodoErrorResponse.fromObject(data.error);
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: ReturnType<typeof AddTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof AddTodoErrorResponse.prototype.toObject>;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok.toObject();
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOk)
            writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
        if (this.hasError)
            writer.writeMessage(2, this.error, () => this.error.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTodoResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTodoResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ok, () => message.ok = AddTodoOKResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.error, () => message.error = AddTodoErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddTodoResponse {
        return AddTodoResponse.deserialize(bytes);
    }
}
export class AddTodoErrorResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3]];
    constructor(data?: any[] | ({} & (({
        unauthorizedError?: ErrorResponse;
        systemUnavailableError?: never;
        invalidTitleLengthError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: ErrorResponse;
        invalidTitleLengthError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: never;
        invalidTitleLengthError?: ErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("unauthorizedError" in data && data.unauthorizedError != undefined) {
                this.unauthorizedError = data.unauthorizedError;
            }
            if ("systemUnavailableError" in data && data.systemUnavailableError != undefined) {
                this.systemUnavailableError = data.systemUnavailableError;
            }
            if ("invalidTitleLengthError" in data && data.invalidTitleLengthError != undefined) {
                this.invalidTitleLengthError = data.invalidTitleLengthError;
            }
        }
    }
    get unauthorizedError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
    }
    set unauthorizedError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasUnauthorizedError() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get systemUnavailableError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
    }
    set systemUnavailableError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasSystemUnavailableError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get invalidTitleLengthError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 3) as ErrorResponse;
    }
    set invalidTitleLengthError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasInvalidTitleLengthError() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get error() {
        const cases: {
            [index: number]: "none" | "unauthorizedError" | "systemUnavailableError" | "invalidTitleLengthError";
        } = {
            0: "none",
            1: "unauthorizedError",
            2: "systemUnavailableError",
            3: "invalidTitleLengthError"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        invalidTitleLengthError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
    }): AddTodoErrorResponse {
        const message = new AddTodoErrorResponse({});
        if (data.unauthorizedError != null) {
            message.unauthorizedError = ErrorResponse.fromObject(data.unauthorizedError);
        }
        if (data.systemUnavailableError != null) {
            message.systemUnavailableError = ErrorResponse.fromObject(data.systemUnavailableError);
        }
        if (data.invalidTitleLengthError != null) {
            message.invalidTitleLengthError = ErrorResponse.fromObject(data.invalidTitleLengthError);
        }
        return message;
    }
    toObject() {
        const data: {
            unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            invalidTitleLengthError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        } = {};
        if (this.unauthorizedError != null) {
            data.unauthorizedError = this.unauthorizedError.toObject();
        }
        if (this.systemUnavailableError != null) {
            data.systemUnavailableError = this.systemUnavailableError.toObject();
        }
        if (this.invalidTitleLengthError != null) {
            data.invalidTitleLengthError = this.invalidTitleLengthError.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasUnauthorizedError)
            writer.writeMessage(1, this.unauthorizedError, () => this.unauthorizedError.serialize(writer));
        if (this.hasSystemUnavailableError)
            writer.writeMessage(2, this.systemUnavailableError, () => this.systemUnavailableError.serialize(writer));
        if (this.hasInvalidTitleLengthError)
            writer.writeMessage(3, this.invalidTitleLengthError, () => this.invalidTitleLengthError.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTodoErrorResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTodoErrorResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.unauthorizedError, () => message.unauthorizedError = ErrorResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.systemUnavailableError, () => message.systemUnavailableError = ErrorResponse.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.invalidTitleLengthError, () => message.invalidTitleLengthError = ErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddTodoErrorResponse {
        return AddTodoErrorResponse.deserialize(bytes);
    }
}
export class AddTodoOKResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: string;
    }): AddTodoOKResponse {
        const message = new AddTodoOKResponse({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddTodoOKResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddTodoOKResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AddTodoOKResponse {
        return AddTodoOKResponse.deserialize(bytes);
    }
}
export class CompleteTodoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: string;
    }): CompleteTodoRequest {
        const message = new CompleteTodoRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteTodoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteTodoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CompleteTodoRequest {
        return CompleteTodoRequest.deserialize(bytes);
    }
}
export class CompleteTodoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ok?: CompleteTodoOKResponse;
        error?: never;
    } | {
        ok?: never;
        error?: CompleteTodoErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get ok() {
        return pb_1.Message.getWrapperField(this, CompleteTodoOKResponse, 1) as CompleteTodoOKResponse;
    }
    set ok(value: CompleteTodoOKResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasOk() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get error() {
        return pb_1.Message.getWrapperField(this, CompleteTodoErrorResponse, 2) as CompleteTodoErrorResponse;
    }
    set error(value: CompleteTodoErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "ok" | "error";
        } = {
            0: "none",
            1: "ok",
            2: "error"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ok?: ReturnType<typeof CompleteTodoOKResponse.prototype.toObject>;
        error?: ReturnType<typeof CompleteTodoErrorResponse.prototype.toObject>;
    }): CompleteTodoResponse {
        const message = new CompleteTodoResponse({});
        if (data.ok != null) {
            message.ok = CompleteTodoOKResponse.fromObject(data.ok);
        }
        if (data.error != null) {
            message.error = CompleteTodoErrorResponse.fromObject(data.error);
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: ReturnType<typeof CompleteTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof CompleteTodoErrorResponse.prototype.toObject>;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok.toObject();
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOk)
            writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
        if (this.hasError)
            writer.writeMessage(2, this.error, () => this.error.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteTodoResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteTodoResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ok, () => message.ok = CompleteTodoOKResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.error, () => message.error = CompleteTodoErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CompleteTodoResponse {
        return CompleteTodoResponse.deserialize(bytes);
    }
}
export class CompleteTodoErrorResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3]];
    constructor(data?: any[] | ({} & (({
        unauthorizedError?: ErrorResponse;
        systemUnavailableError?: never;
        todoAlreadyExistsError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: ErrorResponse;
        todoAlreadyExistsError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: never;
        todoAlreadyExistsError?: ErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("unauthorizedError" in data && data.unauthorizedError != undefined) {
                this.unauthorizedError = data.unauthorizedError;
            }
            if ("systemUnavailableError" in data && data.systemUnavailableError != undefined) {
                this.systemUnavailableError = data.systemUnavailableError;
            }
            if ("todoAlreadyExistsError" in data && data.todoAlreadyExistsError != undefined) {
                this.todoAlreadyExistsError = data.todoAlreadyExistsError;
            }
        }
    }
    get unauthorizedError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
    }
    set unauthorizedError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasUnauthorizedError() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get systemUnavailableError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
    }
    set systemUnavailableError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasSystemUnavailableError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get todoAlreadyExistsError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 3) as ErrorResponse;
    }
    set todoAlreadyExistsError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasTodoAlreadyExistsError() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get error() {
        const cases: {
            [index: number]: "none" | "unauthorizedError" | "systemUnavailableError" | "todoAlreadyExistsError";
        } = {
            0: "none",
            1: "unauthorizedError",
            2: "systemUnavailableError",
            3: "todoAlreadyExistsError"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        todoAlreadyExistsError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
    }): CompleteTodoErrorResponse {
        const message = new CompleteTodoErrorResponse({});
        if (data.unauthorizedError != null) {
            message.unauthorizedError = ErrorResponse.fromObject(data.unauthorizedError);
        }
        if (data.systemUnavailableError != null) {
            message.systemUnavailableError = ErrorResponse.fromObject(data.systemUnavailableError);
        }
        if (data.todoAlreadyExistsError != null) {
            message.todoAlreadyExistsError = ErrorResponse.fromObject(data.todoAlreadyExistsError);
        }
        return message;
    }
    toObject() {
        const data: {
            unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            todoAlreadyExistsError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        } = {};
        if (this.unauthorizedError != null) {
            data.unauthorizedError = this.unauthorizedError.toObject();
        }
        if (this.systemUnavailableError != null) {
            data.systemUnavailableError = this.systemUnavailableError.toObject();
        }
        if (this.todoAlreadyExistsError != null) {
            data.todoAlreadyExistsError = this.todoAlreadyExistsError.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasUnauthorizedError)
            writer.writeMessage(1, this.unauthorizedError, () => this.unauthorizedError.serialize(writer));
        if (this.hasSystemUnavailableError)
            writer.writeMessage(2, this.systemUnavailableError, () => this.systemUnavailableError.serialize(writer));
        if (this.hasTodoAlreadyExistsError)
            writer.writeMessage(3, this.todoAlreadyExistsError, () => this.todoAlreadyExistsError.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteTodoErrorResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteTodoErrorResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.unauthorizedError, () => message.unauthorizedError = ErrorResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.systemUnavailableError, () => message.systemUnavailableError = ErrorResponse.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.todoAlreadyExistsError, () => message.todoAlreadyExistsError = ErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CompleteTodoErrorResponse {
        return CompleteTodoErrorResponse.deserialize(bytes);
    }
}
export class DeleteTodoOKResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): DeleteTodoOKResponse {
        const message = new DeleteTodoOKResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoOKResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoOKResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteTodoOKResponse {
        return DeleteTodoOKResponse.deserialize(bytes);
    }
}
export class DeleteTodoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: string;
    }): DeleteTodoRequest {
        const message = new DeleteTodoRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteTodoRequest {
        return DeleteTodoRequest.deserialize(bytes);
    }
}
export class DeleteTodoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ok?: DeleteTodoOKResponse;
        error?: never;
    } | {
        ok?: never;
        error?: DeleteTodoErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get ok() {
        return pb_1.Message.getWrapperField(this, DeleteTodoOKResponse, 1) as DeleteTodoOKResponse;
    }
    set ok(value: DeleteTodoOKResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasOk() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get error() {
        return pb_1.Message.getWrapperField(this, DeleteTodoErrorResponse, 2) as DeleteTodoErrorResponse;
    }
    set error(value: DeleteTodoErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "ok" | "error";
        } = {
            0: "none",
            1: "ok",
            2: "error"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ok?: ReturnType<typeof DeleteTodoOKResponse.prototype.toObject>;
        error?: ReturnType<typeof DeleteTodoErrorResponse.prototype.toObject>;
    }): DeleteTodoResponse {
        const message = new DeleteTodoResponse({});
        if (data.ok != null) {
            message.ok = DeleteTodoOKResponse.fromObject(data.ok);
        }
        if (data.error != null) {
            message.error = DeleteTodoErrorResponse.fromObject(data.error);
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: ReturnType<typeof DeleteTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof DeleteTodoErrorResponse.prototype.toObject>;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok.toObject();
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOk)
            writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
        if (this.hasError)
            writer.writeMessage(2, this.error, () => this.error.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ok, () => message.ok = DeleteTodoOKResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.error, () => message.error = DeleteTodoErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteTodoResponse {
        return DeleteTodoResponse.deserialize(bytes);
    }
}
export class DeleteTodoErrorResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3]];
    constructor(data?: any[] | ({} & (({
        unauthorizedError?: ErrorResponse;
        systemUnavailableError?: never;
        todoAlreadyExistsError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: ErrorResponse;
        todoAlreadyExistsError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: never;
        todoAlreadyExistsError?: ErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("unauthorizedError" in data && data.unauthorizedError != undefined) {
                this.unauthorizedError = data.unauthorizedError;
            }
            if ("systemUnavailableError" in data && data.systemUnavailableError != undefined) {
                this.systemUnavailableError = data.systemUnavailableError;
            }
            if ("todoAlreadyExistsError" in data && data.todoAlreadyExistsError != undefined) {
                this.todoAlreadyExistsError = data.todoAlreadyExistsError;
            }
        }
    }
    get unauthorizedError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
    }
    set unauthorizedError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasUnauthorizedError() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get systemUnavailableError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
    }
    set systemUnavailableError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasSystemUnavailableError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get todoAlreadyExistsError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 3) as ErrorResponse;
    }
    set todoAlreadyExistsError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasTodoAlreadyExistsError() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get error() {
        const cases: {
            [index: number]: "none" | "unauthorizedError" | "systemUnavailableError" | "todoAlreadyExistsError";
        } = {
            0: "none",
            1: "unauthorizedError",
            2: "systemUnavailableError",
            3: "todoAlreadyExistsError"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        todoAlreadyExistsError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
    }): DeleteTodoErrorResponse {
        const message = new DeleteTodoErrorResponse({});
        if (data.unauthorizedError != null) {
            message.unauthorizedError = ErrorResponse.fromObject(data.unauthorizedError);
        }
        if (data.systemUnavailableError != null) {
            message.systemUnavailableError = ErrorResponse.fromObject(data.systemUnavailableError);
        }
        if (data.todoAlreadyExistsError != null) {
            message.todoAlreadyExistsError = ErrorResponse.fromObject(data.todoAlreadyExistsError);
        }
        return message;
    }
    toObject() {
        const data: {
            unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            todoAlreadyExistsError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        } = {};
        if (this.unauthorizedError != null) {
            data.unauthorizedError = this.unauthorizedError.toObject();
        }
        if (this.systemUnavailableError != null) {
            data.systemUnavailableError = this.systemUnavailableError.toObject();
        }
        if (this.todoAlreadyExistsError != null) {
            data.todoAlreadyExistsError = this.todoAlreadyExistsError.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasUnauthorizedError)
            writer.writeMessage(1, this.unauthorizedError, () => this.unauthorizedError.serialize(writer));
        if (this.hasSystemUnavailableError)
            writer.writeMessage(2, this.systemUnavailableError, () => this.systemUnavailableError.serialize(writer));
        if (this.hasTodoAlreadyExistsError)
            writer.writeMessage(3, this.todoAlreadyExistsError, () => this.todoAlreadyExistsError.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoErrorResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoErrorResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.unauthorizedError, () => message.unauthorizedError = ErrorResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.systemUnavailableError, () => message.systemUnavailableError = ErrorResponse.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.todoAlreadyExistsError, () => message.todoAlreadyExistsError = ErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteTodoErrorResponse {
        return DeleteTodoErrorResponse.deserialize(bytes);
    }
}
export class CompleteTodoOKResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): CompleteTodoOKResponse {
        const message = new CompleteTodoOKResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteTodoOKResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteTodoOKResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CompleteTodoOKResponse {
        return CompleteTodoOKResponse.deserialize(bytes);
    }
}
export class GetAllTodosRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): GetAllTodosRequest {
        const message = new GetAllTodosRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllTodosRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllTodosRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllTodosRequest {
        return GetAllTodosRequest.deserialize(bytes);
    }
}
export class GetAllTodosResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ok?: GetAllTodosOKResponse;
        error?: never;
    } | {
        ok?: never;
        error?: GetAllTodosErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get ok() {
        return pb_1.Message.getWrapperField(this, GetAllTodosOKResponse, 1) as GetAllTodosOKResponse;
    }
    set ok(value: GetAllTodosOKResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasOk() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get error() {
        return pb_1.Message.getWrapperField(this, GetAllTodosErrorResponse, 2) as GetAllTodosErrorResponse;
    }
    set error(value: GetAllTodosErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "ok" | "error";
        } = {
            0: "none",
            1: "ok",
            2: "error"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ok?: ReturnType<typeof GetAllTodosOKResponse.prototype.toObject>;
        error?: ReturnType<typeof GetAllTodosErrorResponse.prototype.toObject>;
    }): GetAllTodosResponse {
        const message = new GetAllTodosResponse({});
        if (data.ok != null) {
            message.ok = GetAllTodosOKResponse.fromObject(data.ok);
        }
        if (data.error != null) {
            message.error = GetAllTodosErrorResponse.fromObject(data.error);
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: ReturnType<typeof GetAllTodosOKResponse.prototype.toObject>;
            error?: ReturnType<typeof GetAllTodosErrorResponse.prototype.toObject>;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok.toObject();
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOk)
            writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
        if (this.hasError)
            writer.writeMessage(2, this.error, () => this.error.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllTodosResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllTodosResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ok, () => message.ok = GetAllTodosOKResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.error, () => message.error = GetAllTodosErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllTodosResponse {
        return GetAllTodosResponse.deserialize(bytes);
    }
}
export class GetAllTodosErrorResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        unauthorizedError?: ErrorResponse;
        systemUnavailableError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: ErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("unauthorizedError" in data && data.unauthorizedError != undefined) {
                this.unauthorizedError = data.unauthorizedError;
            }
            if ("systemUnavailableError" in data && data.systemUnavailableError != undefined) {
                this.systemUnavailableError = data.systemUnavailableError;
            }
        }
    }
    get unauthorizedError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
    }
    set unauthorizedError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasUnauthorizedError() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get systemUnavailableError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
    }
    set systemUnavailableError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasSystemUnavailableError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get error() {
        const cases: {
            [index: number]: "none" | "unauthorizedError" | "systemUnavailableError";
        } = {
            0: "none",
            1: "unauthorizedError",
            2: "systemUnavailableError"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
    }): GetAllTodosErrorResponse {
        const message = new GetAllTodosErrorResponse({});
        if (data.unauthorizedError != null) {
            message.unauthorizedError = ErrorResponse.fromObject(data.unauthorizedError);
        }
        if (data.systemUnavailableError != null) {
            message.systemUnavailableError = ErrorResponse.fromObject(data.systemUnavailableError);
        }
        return message;
    }
    toObject() {
        const data: {
            unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        } = {};
        if (this.unauthorizedError != null) {
            data.unauthorizedError = this.unauthorizedError.toObject();
        }
        if (this.systemUnavailableError != null) {
            data.systemUnavailableError = this.systemUnavailableError.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasUnauthorizedError)
            writer.writeMessage(1, this.unauthorizedError, () => this.unauthorizedError.serialize(writer));
        if (this.hasSystemUnavailableError)
            writer.writeMessage(2, this.systemUnavailableError, () => this.systemUnavailableError.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllTodosErrorResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllTodosErrorResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.unauthorizedError, () => message.unauthorizedError = ErrorResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.systemUnavailableError, () => message.systemUnavailableError = ErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllTodosErrorResponse {
        return GetAllTodosErrorResponse.deserialize(bytes);
    }
}
export class GetAllTodosOKResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        todos?: Todo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("todos" in data && data.todos != undefined) {
                this.todos = data.todos;
            }
        }
    }
    get todos() {
        return pb_1.Message.getRepeatedWrapperField(this, Todo, 1) as Todo[];
    }
    set todos(value: Todo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        todos?: ReturnType<typeof Todo.prototype.toObject>[];
    }): GetAllTodosOKResponse {
        const message = new GetAllTodosOKResponse({});
        if (data.todos != null) {
            message.todos = data.todos.map(item => Todo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            todos?: ReturnType<typeof Todo.prototype.toObject>[];
        } = {};
        if (this.todos != null) {
            data.todos = this.todos.map((item: Todo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.todos.length)
            writer.writeRepeatedMessage(1, this.todos, (item: Todo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllTodosOKResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllTodosOKResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.todos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Todo.deserialize(reader), Todo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllTodosOKResponse {
        return GetAllTodosOKResponse.deserialize(bytes);
    }
}
export class ModifyTitleTodoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        title?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: string;
        title?: string;
    }): ModifyTitleTodoRequest {
        const message = new ModifyTitleTodoRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            title?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.title.length)
            writer.writeString(2, this.title);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyTitleTodoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyTitleTodoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.title = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ModifyTitleTodoRequest {
        return ModifyTitleTodoRequest.deserialize(bytes);
    }
}
export class ModifyTitleTodoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ok?: ModifyTitleTodoOKResponse;
        error?: never;
    } | {
        ok?: never;
        error?: ModifyTitleTodoErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get ok() {
        return pb_1.Message.getWrapperField(this, ModifyTitleTodoOKResponse, 1) as ModifyTitleTodoOKResponse;
    }
    set ok(value: ModifyTitleTodoOKResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasOk() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get error() {
        return pb_1.Message.getWrapperField(this, ModifyTitleTodoErrorResponse, 2) as ModifyTitleTodoErrorResponse;
    }
    set error(value: ModifyTitleTodoErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "ok" | "error";
        } = {
            0: "none",
            1: "ok",
            2: "error"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ok?: ReturnType<typeof ModifyTitleTodoOKResponse.prototype.toObject>;
        error?: ReturnType<typeof ModifyTitleTodoErrorResponse.prototype.toObject>;
    }): ModifyTitleTodoResponse {
        const message = new ModifyTitleTodoResponse({});
        if (data.ok != null) {
            message.ok = ModifyTitleTodoOKResponse.fromObject(data.ok);
        }
        if (data.error != null) {
            message.error = ModifyTitleTodoErrorResponse.fromObject(data.error);
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: ReturnType<typeof ModifyTitleTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof ModifyTitleTodoErrorResponse.prototype.toObject>;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok.toObject();
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOk)
            writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
        if (this.hasError)
            writer.writeMessage(2, this.error, () => this.error.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyTitleTodoResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyTitleTodoResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ok, () => message.ok = ModifyTitleTodoOKResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.error, () => message.error = ModifyTitleTodoErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ModifyTitleTodoResponse {
        return ModifyTitleTodoResponse.deserialize(bytes);
    }
}
export class ModifyTitleTodoErrorResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4]];
    constructor(data?: any[] | ({} & (({
        unauthorizedError?: ErrorResponse;
        systemUnavailableError?: never;
        todoDoesNotExistError?: never;
        invalidTitleLengthError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: ErrorResponse;
        todoDoesNotExistError?: never;
        invalidTitleLengthError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: never;
        todoDoesNotExistError?: ErrorResponse;
        invalidTitleLengthError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: never;
        todoDoesNotExistError?: never;
        invalidTitleLengthError?: ErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("unauthorizedError" in data && data.unauthorizedError != undefined) {
                this.unauthorizedError = data.unauthorizedError;
            }
            if ("systemUnavailableError" in data && data.systemUnavailableError != undefined) {
                this.systemUnavailableError = data.systemUnavailableError;
            }
            if ("todoDoesNotExistError" in data && data.todoDoesNotExistError != undefined) {
                this.todoDoesNotExistError = data.todoDoesNotExistError;
            }
            if ("invalidTitleLengthError" in data && data.invalidTitleLengthError != undefined) {
                this.invalidTitleLengthError = data.invalidTitleLengthError;
            }
        }
    }
    get unauthorizedError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
    }
    set unauthorizedError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasUnauthorizedError() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get systemUnavailableError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
    }
    set systemUnavailableError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasSystemUnavailableError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get todoDoesNotExistError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 3) as ErrorResponse;
    }
    set todoDoesNotExistError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasTodoDoesNotExistError() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get invalidTitleLengthError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 4) as ErrorResponse;
    }
    set invalidTitleLengthError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get hasInvalidTitleLengthError() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get error() {
        const cases: {
            [index: number]: "none" | "unauthorizedError" | "systemUnavailableError" | "todoDoesNotExistError" | "invalidTitleLengthError";
        } = {
            0: "none",
            1: "unauthorizedError",
            2: "systemUnavailableError",
            3: "todoDoesNotExistError",
            4: "invalidTitleLengthError"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
    }
    static fromObject(data: {
        unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        todoDoesNotExistError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        invalidTitleLengthError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
    }): ModifyTitleTodoErrorResponse {
        const message = new ModifyTitleTodoErrorResponse({});
        if (data.unauthorizedError != null) {
            message.unauthorizedError = ErrorResponse.fromObject(data.unauthorizedError);
        }
        if (data.systemUnavailableError != null) {
            message.systemUnavailableError = ErrorResponse.fromObject(data.systemUnavailableError);
        }
        if (data.todoDoesNotExistError != null) {
            message.todoDoesNotExistError = ErrorResponse.fromObject(data.todoDoesNotExistError);
        }
        if (data.invalidTitleLengthError != null) {
            message.invalidTitleLengthError = ErrorResponse.fromObject(data.invalidTitleLengthError);
        }
        return message;
    }
    toObject() {
        const data: {
            unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            todoDoesNotExistError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            invalidTitleLengthError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        } = {};
        if (this.unauthorizedError != null) {
            data.unauthorizedError = this.unauthorizedError.toObject();
        }
        if (this.systemUnavailableError != null) {
            data.systemUnavailableError = this.systemUnavailableError.toObject();
        }
        if (this.todoDoesNotExistError != null) {
            data.todoDoesNotExistError = this.todoDoesNotExistError.toObject();
        }
        if (this.invalidTitleLengthError != null) {
            data.invalidTitleLengthError = this.invalidTitleLengthError.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasUnauthorizedError)
            writer.writeMessage(1, this.unauthorizedError, () => this.unauthorizedError.serialize(writer));
        if (this.hasSystemUnavailableError)
            writer.writeMessage(2, this.systemUnavailableError, () => this.systemUnavailableError.serialize(writer));
        if (this.hasTodoDoesNotExistError)
            writer.writeMessage(3, this.todoDoesNotExistError, () => this.todoDoesNotExistError.serialize(writer));
        if (this.hasInvalidTitleLengthError)
            writer.writeMessage(4, this.invalidTitleLengthError, () => this.invalidTitleLengthError.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyTitleTodoErrorResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyTitleTodoErrorResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.unauthorizedError, () => message.unauthorizedError = ErrorResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.systemUnavailableError, () => message.systemUnavailableError = ErrorResponse.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.todoDoesNotExistError, () => message.todoDoesNotExistError = ErrorResponse.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.invalidTitleLengthError, () => message.invalidTitleLengthError = ErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ModifyTitleTodoErrorResponse {
        return ModifyTitleTodoErrorResponse.deserialize(bytes);
    }
}
export class ModifyTitleTodoOKResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ModifyTitleTodoOKResponse {
        const message = new ModifyTitleTodoOKResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyTitleTodoOKResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyTitleTodoOKResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ModifyTitleTodoOKResponse {
        return ModifyTitleTodoOKResponse.deserialize(bytes);
    }
}
export class UncompleteTodoRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: string;
    }): UncompleteTodoRequest {
        const message = new UncompleteTodoRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UncompleteTodoRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UncompleteTodoRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UncompleteTodoRequest {
        return UncompleteTodoRequest.deserialize(bytes);
    }
}
export class UncompleteTodoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ok?: UncompleteTodoOKResponse;
        error?: never;
    } | {
        ok?: never;
        error?: UncompleteTodoErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get ok() {
        return pb_1.Message.getWrapperField(this, UncompleteTodoOKResponse, 1) as UncompleteTodoOKResponse;
    }
    set ok(value: UncompleteTodoOKResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasOk() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get error() {
        return pb_1.Message.getWrapperField(this, UncompleteTodoErrorResponse, 2) as UncompleteTodoErrorResponse;
    }
    set error(value: UncompleteTodoErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "ok" | "error";
        } = {
            0: "none",
            1: "ok",
            2: "error"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ok?: ReturnType<typeof UncompleteTodoOKResponse.prototype.toObject>;
        error?: ReturnType<typeof UncompleteTodoErrorResponse.prototype.toObject>;
    }): UncompleteTodoResponse {
        const message = new UncompleteTodoResponse({});
        if (data.ok != null) {
            message.ok = UncompleteTodoOKResponse.fromObject(data.ok);
        }
        if (data.error != null) {
            message.error = UncompleteTodoErrorResponse.fromObject(data.error);
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: ReturnType<typeof UncompleteTodoOKResponse.prototype.toObject>;
            error?: ReturnType<typeof UncompleteTodoErrorResponse.prototype.toObject>;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok.toObject();
        }
        if (this.error != null) {
            data.error = this.error.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasOk)
            writer.writeMessage(1, this.ok, () => this.ok.serialize(writer));
        if (this.hasError)
            writer.writeMessage(2, this.error, () => this.error.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UncompleteTodoResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UncompleteTodoResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ok, () => message.ok = UncompleteTodoOKResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.error, () => message.error = UncompleteTodoErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UncompleteTodoResponse {
        return UncompleteTodoResponse.deserialize(bytes);
    }
}
export class UncompleteTodoErrorResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3]];
    constructor(data?: any[] | ({} & (({
        unauthorizedError?: ErrorResponse;
        systemUnavailableError?: never;
        todoAlreadyExistsError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: ErrorResponse;
        todoAlreadyExistsError?: never;
    } | {
        unauthorizedError?: never;
        systemUnavailableError?: never;
        todoAlreadyExistsError?: ErrorResponse;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("unauthorizedError" in data && data.unauthorizedError != undefined) {
                this.unauthorizedError = data.unauthorizedError;
            }
            if ("systemUnavailableError" in data && data.systemUnavailableError != undefined) {
                this.systemUnavailableError = data.systemUnavailableError;
            }
            if ("todoAlreadyExistsError" in data && data.todoAlreadyExistsError != undefined) {
                this.todoAlreadyExistsError = data.todoAlreadyExistsError;
            }
        }
    }
    get unauthorizedError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 1) as ErrorResponse;
    }
    set unauthorizedError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get hasUnauthorizedError() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get systemUnavailableError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 2) as ErrorResponse;
    }
    set systemUnavailableError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get hasSystemUnavailableError() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get todoAlreadyExistsError() {
        return pb_1.Message.getWrapperField(this, ErrorResponse, 3) as ErrorResponse;
    }
    set todoAlreadyExistsError(value: ErrorResponse) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get hasTodoAlreadyExistsError() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get error() {
        const cases: {
            [index: number]: "none" | "unauthorizedError" | "systemUnavailableError" | "todoAlreadyExistsError";
        } = {
            0: "none",
            1: "unauthorizedError",
            2: "systemUnavailableError",
            3: "todoAlreadyExistsError"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        todoAlreadyExistsError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
    }): UncompleteTodoErrorResponse {
        const message = new UncompleteTodoErrorResponse({});
        if (data.unauthorizedError != null) {
            message.unauthorizedError = ErrorResponse.fromObject(data.unauthorizedError);
        }
        if (data.systemUnavailableError != null) {
            message.systemUnavailableError = ErrorResponse.fromObject(data.systemUnavailableError);
        }
        if (data.todoAlreadyExistsError != null) {
            message.todoAlreadyExistsError = ErrorResponse.fromObject(data.todoAlreadyExistsError);
        }
        return message;
    }
    toObject() {
        const data: {
            unauthorizedError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            systemUnavailableError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
            todoAlreadyExistsError?: ReturnType<typeof ErrorResponse.prototype.toObject>;
        } = {};
        if (this.unauthorizedError != null) {
            data.unauthorizedError = this.unauthorizedError.toObject();
        }
        if (this.systemUnavailableError != null) {
            data.systemUnavailableError = this.systemUnavailableError.toObject();
        }
        if (this.todoAlreadyExistsError != null) {
            data.todoAlreadyExistsError = this.todoAlreadyExistsError.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasUnauthorizedError)
            writer.writeMessage(1, this.unauthorizedError, () => this.unauthorizedError.serialize(writer));
        if (this.hasSystemUnavailableError)
            writer.writeMessage(2, this.systemUnavailableError, () => this.systemUnavailableError.serialize(writer));
        if (this.hasTodoAlreadyExistsError)
            writer.writeMessage(3, this.todoAlreadyExistsError, () => this.todoAlreadyExistsError.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UncompleteTodoErrorResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UncompleteTodoErrorResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.unauthorizedError, () => message.unauthorizedError = ErrorResponse.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.systemUnavailableError, () => message.systemUnavailableError = ErrorResponse.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.todoAlreadyExistsError, () => message.todoAlreadyExistsError = ErrorResponse.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UncompleteTodoErrorResponse {
        return UncompleteTodoErrorResponse.deserialize(bytes);
    }
}
export class UncompleteTodoOKResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): UncompleteTodoOKResponse {
        const message = new UncompleteTodoOKResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UncompleteTodoOKResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UncompleteTodoOKResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UncompleteTodoOKResponse {
        return UncompleteTodoOKResponse.deserialize(bytes);
    }
}
export class Todo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        title?: string;
        completed?: boolean;
        userId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("completed" in data && data.completed != undefined) {
                this.completed = data.completed;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get completed() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set completed(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set userId(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: string;
        title?: string;
        completed?: boolean;
        userId?: string;
    }): Todo {
        const message = new Todo({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.completed != null) {
            message.completed = data.completed;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            title?: string;
            completed?: boolean;
            userId?: string;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.completed != null) {
            data.completed = this.completed;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.title.length)
            writer.writeString(2, this.title);
        if (this.completed != false)
            writer.writeBool(3, this.completed);
        if (this.userId.length)
            writer.writeString(4, this.userId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Todo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Todo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.title = reader.readString();
                    break;
                case 3:
                    message.completed = reader.readBool();
                    break;
                case 4:
                    message.userId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Todo {
        return Todo.deserialize(bytes);
    }
}
export abstract class UnimplementedTodoServiceService {
    static definition = {
        Add: {
            path: "/todo.TodoService/Add",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AddTodoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AddTodoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: AddTodoResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => AddTodoResponse.deserialize(new Uint8Array(bytes))
        },
        Complete: {
            path: "/todo.TodoService/Complete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CompleteTodoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CompleteTodoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CompleteTodoResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CompleteTodoResponse.deserialize(new Uint8Array(bytes))
        },
        Uncomplete: {
            path: "/todo.TodoService/Uncomplete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UncompleteTodoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UncompleteTodoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UncompleteTodoResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UncompleteTodoResponse.deserialize(new Uint8Array(bytes))
        },
        ModifyTitle: {
            path: "/todo.TodoService/ModifyTitle",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ModifyTitleTodoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ModifyTitleTodoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ModifyTitleTodoResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ModifyTitleTodoResponse.deserialize(new Uint8Array(bytes))
        },
        Delete: {
            path: "/todo.TodoService/Delete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteTodoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteTodoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DeleteTodoResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DeleteTodoResponse.deserialize(new Uint8Array(bytes))
        },
        GetAll: {
            path: "/todo.TodoService/GetAll",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetAllTodosRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetAllTodosRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetAllTodosResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetAllTodosResponse.deserialize(new Uint8Array(bytes))
        },
        InitializeSubscriptionConnection: {
            path: "/todo.TodoService/InitializeSubscriptionConnection",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: InitializeConnectionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => InitializeConnectionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: InitializeConnectionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => InitializeConnectionResponse.deserialize(new Uint8Array(bytes))
        },
        KeepSubscriptionAlive: {
            path: "/todo.TodoService/KeepSubscriptionAlive",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: KeepSubscriptionAliveRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => KeepSubscriptionAliveRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: KeepSubscriptionAliveResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => KeepSubscriptionAliveResponse.deserialize(new Uint8Array(bytes))
        },
        On: {
            path: "/todo.TodoService/On",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: OnTodoRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => OnTodoRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: OnEvent) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => OnEvent.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Add(call: grpc_1.ServerUnaryCall<AddTodoRequest, AddTodoResponse>, callback: grpc_1.sendUnaryData<AddTodoResponse>): void;
    abstract Complete(call: grpc_1.ServerUnaryCall<CompleteTodoRequest, CompleteTodoResponse>, callback: grpc_1.sendUnaryData<CompleteTodoResponse>): void;
    abstract Uncomplete(call: grpc_1.ServerUnaryCall<UncompleteTodoRequest, UncompleteTodoResponse>, callback: grpc_1.sendUnaryData<UncompleteTodoResponse>): void;
    abstract ModifyTitle(call: grpc_1.ServerUnaryCall<ModifyTitleTodoRequest, ModifyTitleTodoResponse>, callback: grpc_1.sendUnaryData<ModifyTitleTodoResponse>): void;
    abstract Delete(call: grpc_1.ServerUnaryCall<DeleteTodoRequest, DeleteTodoResponse>, callback: grpc_1.sendUnaryData<DeleteTodoResponse>): void;
    abstract GetAll(call: grpc_1.ServerUnaryCall<GetAllTodosRequest, GetAllTodosResponse>, callback: grpc_1.sendUnaryData<GetAllTodosResponse>): void;
    abstract InitializeSubscriptionConnection(call: grpc_1.ServerUnaryCall<InitializeConnectionRequest, InitializeConnectionResponse>, callback: grpc_1.sendUnaryData<InitializeConnectionResponse>): void;
    abstract KeepSubscriptionAlive(call: grpc_1.ServerUnaryCall<KeepSubscriptionAliveRequest, KeepSubscriptionAliveResponse>, callback: grpc_1.sendUnaryData<KeepSubscriptionAliveResponse>): void;
    abstract On(call: grpc_1.ServerWritableStream<OnTodoRequest, OnEvent>): void;
}
export class TodoServiceClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static Add = new grpc_web_1.MethodDescriptor<AddTodoRequest, AddTodoResponse>("/todo.TodoService/Add", grpc_web_1.MethodType.UNARY, AddTodoRequest, AddTodoResponse, (message: AddTodoRequest) => message.serialize(), AddTodoResponse.deserialize);
    Add(message: AddTodoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<AddTodoRequest, AddTodoResponse>(this._address + "/todo.TodoService/Add", message, metadata || {}, TodoServiceClient.Add);
    }
    private static Complete = new grpc_web_1.MethodDescriptor<CompleteTodoRequest, CompleteTodoResponse>("/todo.TodoService/Complete", grpc_web_1.MethodType.UNARY, CompleteTodoRequest, CompleteTodoResponse, (message: CompleteTodoRequest) => message.serialize(), CompleteTodoResponse.deserialize);
    Complete(message: CompleteTodoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CompleteTodoRequest, CompleteTodoResponse>(this._address + "/todo.TodoService/Complete", message, metadata || {}, TodoServiceClient.Complete);
    }
    private static Uncomplete = new grpc_web_1.MethodDescriptor<UncompleteTodoRequest, UncompleteTodoResponse>("/todo.TodoService/Uncomplete", grpc_web_1.MethodType.UNARY, UncompleteTodoRequest, UncompleteTodoResponse, (message: UncompleteTodoRequest) => message.serialize(), UncompleteTodoResponse.deserialize);
    Uncomplete(message: UncompleteTodoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<UncompleteTodoRequest, UncompleteTodoResponse>(this._address + "/todo.TodoService/Uncomplete", message, metadata || {}, TodoServiceClient.Uncomplete);
    }
    private static ModifyTitle = new grpc_web_1.MethodDescriptor<ModifyTitleTodoRequest, ModifyTitleTodoResponse>("/todo.TodoService/ModifyTitle", grpc_web_1.MethodType.UNARY, ModifyTitleTodoRequest, ModifyTitleTodoResponse, (message: ModifyTitleTodoRequest) => message.serialize(), ModifyTitleTodoResponse.deserialize);
    ModifyTitle(message: ModifyTitleTodoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<ModifyTitleTodoRequest, ModifyTitleTodoResponse>(this._address + "/todo.TodoService/ModifyTitle", message, metadata || {}, TodoServiceClient.ModifyTitle);
    }
    private static Delete = new grpc_web_1.MethodDescriptor<DeleteTodoRequest, DeleteTodoResponse>("/todo.TodoService/Delete", grpc_web_1.MethodType.UNARY, DeleteTodoRequest, DeleteTodoResponse, (message: DeleteTodoRequest) => message.serialize(), DeleteTodoResponse.deserialize);
    Delete(message: DeleteTodoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<DeleteTodoRequest, DeleteTodoResponse>(this._address + "/todo.TodoService/Delete", message, metadata || {}, TodoServiceClient.Delete);
    }
    private static GetAll = new grpc_web_1.MethodDescriptor<GetAllTodosRequest, GetAllTodosResponse>("/todo.TodoService/GetAll", grpc_web_1.MethodType.UNARY, GetAllTodosRequest, GetAllTodosResponse, (message: GetAllTodosRequest) => message.serialize(), GetAllTodosResponse.deserialize);
    GetAll(message: GetAllTodosRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetAllTodosRequest, GetAllTodosResponse>(this._address + "/todo.TodoService/GetAll", message, metadata || {}, TodoServiceClient.GetAll);
    }
    private static InitializeSubscriptionConnection = new grpc_web_1.MethodDescriptor<InitializeConnectionRequest, InitializeConnectionResponse>("/todo.TodoService/InitializeSubscriptionConnection", grpc_web_1.MethodType.UNARY, InitializeConnectionRequest, InitializeConnectionResponse, (message: InitializeConnectionRequest) => message.serialize(), InitializeConnectionResponse.deserialize);
    InitializeSubscriptionConnection(message: InitializeConnectionRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<InitializeConnectionRequest, InitializeConnectionResponse>(this._address + "/todo.TodoService/InitializeSubscriptionConnection", message, metadata || {}, TodoServiceClient.InitializeSubscriptionConnection);
    }
    private static KeepSubscriptionAlive = new grpc_web_1.MethodDescriptor<KeepSubscriptionAliveRequest, KeepSubscriptionAliveResponse>("/todo.TodoService/KeepSubscriptionAlive", grpc_web_1.MethodType.UNARY, KeepSubscriptionAliveRequest, KeepSubscriptionAliveResponse, (message: KeepSubscriptionAliveRequest) => message.serialize(), KeepSubscriptionAliveResponse.deserialize);
    KeepSubscriptionAlive(message: KeepSubscriptionAliveRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<KeepSubscriptionAliveRequest, KeepSubscriptionAliveResponse>(this._address + "/todo.TodoService/KeepSubscriptionAlive", message, metadata || {}, TodoServiceClient.KeepSubscriptionAlive);
    }
    private static On = new grpc_web_1.MethodDescriptor<OnTodoRequest, OnEvent>("/todo.TodoService/On", grpc_web_1.MethodType.SERVER_STREAMING, OnTodoRequest, OnEvent, (message: OnTodoRequest) => message.serialize(), OnEvent.deserialize);
    On(message: OnTodoRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/todo.TodoService/On", message, metadata || {}, TodoServiceClient.On);
    }
}
